using ToDoApi.Data;
using ToDoApi.Models;
using Microsoft.EntityFrameworkCore;
using System;

namespace ToDoApi.Services
{
    public class TaskStateService
    {
        private readonly ILogger<TaskStateService> _logger;
        private readonly ToDoContext _db;

        public TaskStateService(ToDoContext db, ILogger<TaskStateService> logger)
        {
            _db = db;
            _logger = logger;
        }

        public async Task ProcessDailyTasks()
        {
            // --- GEÃ‡Ä°CÄ° DEBUG LOG 1: TRIGGER BAÅžLANGICI ---
            _logger.LogWarning("========== HANGFIRE TRIGGER KONTROLÃœ BAÅžLADI ==========");

            // --- TEST Ä°Ã‡Ä°N TARÄ°H SÄ°MÃœLASYONU ---
            // Test yapmak iÃ§in aÅŸaÄŸÄ±daki satÄ±rlardan BÄ°RÄ°NÄ° seÃ§ip diÄŸerlerini yorum satÄ±rÄ± yapÄ±n.
            // Test bittiÄŸinde ORÄ°JÄ°NAL KOD'u tekrar aktif etmeyi UNUTMAYIN!
            
            //var today = DateTime.UtcNow.Date; // <<-- ORÄ°JÄ°NAL KOD (Normal Ã§alÄ±ÅŸma iÃ§in bu satÄ±r aktif olmalÄ±)
            //var today = DateTime.UtcNow.Date.AddDays(1);    // YARINI test etmek iÃ§in bu satÄ±rÄ± kullanÄ±n
            //var today = DateTime.UtcNow.Date.AddDays(14);    // 1 HAFTA SONRASINI test etmek iÃ§in bu satÄ±rÄ± kullanÄ±n
            var today = DateTime.UtcNow.Date.AddMonths(2);  // 1 AY SONRASINI test etmek iÃ§in bu satÄ±rÄ± kullanÄ±n

            _logger.LogInformation("GÃ¶rev durumu iÅŸleme sÃ¼reci baÅŸladÄ±. SimÃ¼le edilen tarih (UTC): {Today}", today);

            // --- 1. ADIM: YENÄ° GÃ–REV KOPYALARINI OLUÅžTUR (DEÄžÄ°ÅžÄ°KLÄ°K YOK) ---
            await CreateNewInstances(today);

            // --- 2. ADIM (HATA DÃœZELTMESÄ°): AKTÄ°F OLMASI GEREKEN GÃ–REVLERÄ° BELÄ°RLE ---
            var yesterday = today.AddDays(-1);
            var sevenDaysAgo = today.AddDays(-7);
            var oneMonthAgo = today.AddMonths(-1);

            var idsThatShouldBeOpen = await _db.ToDoItems
                .AsNoTracking()
                .Where(t => !t.IsTemplate)
                .Where(t =>
                    (t.Category == "GÃ¼nlÃ¼k" && t.CreatedAt.Date == yesterday) ||
                    (t.Category == "HaftalÄ±k" && t.CreatedAt.Date <= sevenDaysAgo && t.CreatedAt.Date > sevenDaysAgo.AddDays(-7)) ||
                    (t.Category == "AylÄ±k" && t.CreatedAt.Date <= oneMonthAgo && t.CreatedAt.Date > oneMonthAgo.AddMonths(-1))
                )
                .Select(t => t.Id)
                .ToListAsync();

            var shouldBeOpenIds = new HashSet<int>(idsThatShouldBeOpen);

            // --- GEÃ‡Ä°CÄ° DEBUG LOG 2: BULUNAN GÃ–REVLER ---
            if (shouldBeOpenIds.Any())
            {
                _logger.LogInformation("AÃ§Ä±k duruma getirilmesi gereken {Count} adet gÃ¶rev ID'si bulundu: {Ids}", shouldBeOpenIds.Count, string.Join(", ", shouldBeOpenIds));
            }
            else
            {
                _logger.LogInformation("BugÃ¼n 'AÃ§Ä±k' duruma getirilecek herhangi bir gÃ¶rev bulunamadÄ±.");
            }

            // --- 3. ADIM: GÃ–REVLERÄ° GÃœNCELLE (AÃ‡MA VE KAPATMA) ---
            var tasksToOpen = await _db.ToDoItems
                .Where(t => !t.IsTemplate && t.State == State.Kapali && shouldBeOpenIds.Contains(t.Id))
                .ToListAsync();
                
            if (tasksToOpen.Any())
            {
                foreach (var task in tasksToOpen)
                {
                    task.State = State.Acik;
                }
                _logger.LogInformation($"{tasksToOpen.Count} adet gÃ¶rev 'AÃ§Ä±k' duruma getirildi.");
            }

            var tasksToClose = await _db.ToDoItems
                .Where(t => !t.IsTemplate && t.State == State.Acik && !shouldBeOpenIds.Contains(t.Id))
                .ToListAsync();

            if (tasksToClose.Any())
            {
                foreach (var task in tasksToClose)
                {
                    task.State = State.Kapali;
                }
                _logger.LogInformation($"{tasksToClose.Count} adet 'AÃ§Ä±k' gÃ¶rev sÃ¼resi dolduÄŸu iÃ§in kilitlendi.");
            }

            await _db.SaveChangesAsync();

            // --- GEÃ‡Ä°CÄ° DEBUG LOG 3: TRIGGER BÄ°TÄ°ÅžÄ° ---
            _logger.LogInformation("GÃ¶rev durumu iÅŸleme sÃ¼reci tamamlandÄ±.");
            _logger.LogWarning("========== HANGFIRE TRIGGER KONTROLÃœ BÄ°TTÄ° ==========");
        }
        
        private async Task CreateNewInstances(DateTime today)
{
    async Task CreateIfNotExists(ToDoItem template, DateTime creationDate)
    {
        var startOfDayUtc = new DateTime(creationDate.Year, creationDate.Month, creationDate.Day, 0, 0, 0, DateTimeKind.Utc);
        var endOfDayUtc = startOfDayUtc.AddDays(1);

        var instanceExists = await _db.ToDoItems.AnyAsync(t =>
            t.ParentTaskId == template.Id &&
            t.CreatedAt >= startOfDayUtc && t.CreatedAt < endOfDayUtc);

        if (!instanceExists)
        {
            var newInstance = CreateInstanceFromTemplate(template, startOfDayUtc);
            _db.ToDoItems.Add(newInstance);
            _logger.LogInformation("Yeni {Category} gÃ¶revi oluÅŸturuldu: {Title}", template.Category, template.Title);
        }
    }

    // ðŸ”¹ GÃ¼nlÃ¼k tekrar
    var dailyTemplates = await _db.ToDoItems.Where(t => t.IsTemplate && t.Category == "GÃ¼nlÃ¼k").ToListAsync();
    foreach (var template in dailyTemplates)
    {
        await CreateIfNotExists(template, today);
    }

    // ðŸ”¹ HaftalÄ±k tekrar
    var weeklyTemplates = await _db.ToDoItems.Where(t => t.IsTemplate && t.Category == "HaftalÄ±k").ToListAsync();
    foreach (var template in weeklyTemplates)
    {
if (template.RepeatDayOfWeek.HasValue)
{
    var repeatDay = (DayOfWeek)template.RepeatDayOfWeek.Value;

    // Bu haftanÄ±n tekrar gÃ¼nÃ¼ (Ã¶rn: Pazartesi ise, bu haftanÄ±n Pazartesi tarihi)
    int diff = ((int)today.DayOfWeek - (int)repeatDay + 7) % 7;
    var thisWeeksRepeatDate = today.AddDays(-diff).Date;

    await CreateIfNotExists(template, thisWeeksRepeatDate);
}
    }

    // ðŸ”¹ AylÄ±k tekrar
var monthlyTemplates = await _db.ToDoItems
    .Where(t => t.IsTemplate && t.Category == "AylÄ±k")
    .ToListAsync();

foreach (var template in monthlyTemplates)
{
    if (!template.RepeatDayOfMonth.HasValue) continue;

    int repeatDay = template.RepeatDayOfMonth.Value;
    int lastDayOfCurrentMonth = DateTime.DaysInMonth(today.Year, today.Month);

    // Bu ay iÃ§in hedef tekrar gÃ¼nÃ¼
    int targetDay = repeatDay > lastDayOfCurrentMonth ? lastDayOfCurrentMonth : repeatDay;
    var thisMonthsRepeatDate = new DateTime(today.Year, today.Month, targetDay, 0, 0, 0, DateTimeKind.Utc);

    // EÄŸer bu ay iÃ§in henÃ¼z instance oluÅŸturulmamÄ±ÅŸsa, ÅŸimdi oluÅŸtur
    await CreateIfNotExists(template, thisMonthsRepeatDate);
}


    await _db.SaveChangesAsync();
}

        
        private ToDoItem CreateInstanceFromTemplate(ToDoItem template, DateTime creationDate)
        {
            return new ToDoItem
            {
                Title = template.Title,
                Category = template.Category,
                CreatedAt = creationDate,
                State = State.Kapali,
                IsTemplate = false,
                ParentTaskId = template.Id,
                UserId = template.UserId
            };
        }
    }
}

